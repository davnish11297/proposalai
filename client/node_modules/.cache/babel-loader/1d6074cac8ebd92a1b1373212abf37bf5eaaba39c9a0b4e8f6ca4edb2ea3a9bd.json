{"ast":null,"code":"class BrowserNotificationService{constructor(){this.permission='default';this.isSupported=void 0;this.isSupported='Notification'in window;if(this.isSupported){this.permission=Notification.permission;}}/**\n   * Check if browser notifications are supported\n   */isNotificationSupported(){return this.isSupported;}/**\n   * Get current permission status\n   */getPermissionStatus(){if(!this.isSupported)return'denied';return Notification.permission;}/**\n   * Request permission to send notifications\n   */async requestPermission(){if(!this.isSupported){console.warn('Browser notifications are not supported');return'denied';}try{const permission=await Notification.requestPermission();this.permission=permission;if(permission==='granted'){console.log('Browser notification permission granted');// Store permission status in localStorage\nlocalStorage.setItem('browserNotificationPermission','granted');}else{console.log('Browser notification permission denied');localStorage.setItem('browserNotificationPermission','denied');}return permission;}catch(error){console.error('Error requesting notification permission:',error);return'denied';}}/**\n   * Check if we have permission to send notifications\n   */canSendNotifications(){return this.isSupported&&this.permission==='granted';}/**\n   * Send a browser notification\n   */sendNotification(data){if(!this.canSendNotifications()){console.warn('Cannot send notifications - permission not granted');return false;}try{const notification=new Notification(data.title,{body:data.body,icon:data.icon||'/favicon.ico',badge:data.badge||'/favicon.ico',tag:data.tag||'proposalai-notification',data:data.data,requireInteraction:data.requireInteraction||false,silent:data.silent||false});// Handle notification click\nnotification.onclick=()=>{var _data$data;window.focus();notification.close();// Navigate to the relevant page if data contains navigation info\nif((_data$data=data.data)!==null&&_data$data!==void 0&&_data$data.navigateTo){window.location.href=data.data.navigateTo;}};// Auto-close notification after 5 seconds (unless requireInteraction is true)\nif(!data.requireInteraction){setTimeout(()=>{notification.close();},5000);}return true;}catch(error){console.error('Error sending browser notification:',error);return false;}}/**\n   * Send notification for new proposal activity\n   */sendProposalNotification(notification){const notificationData={title:notification.title,body:notification.message,icon:'/favicon.ico',tag:`proposal-${notification.proposalId||'general'}`,data:{type:notification.type,proposalId:notification.proposalId,navigateTo:notification.proposalId?`/proposals/${notification.proposalId}`:'/dashboard'},requireInteraction:false,silent:false};return this.sendNotification(notificationData);}/**\n   * Initialize the service and check for stored permission\n   */initialize(){if(!this.isSupported)return;// Check if we have stored permission status\nconst storedPermission=localStorage.getItem('browserNotificationPermission');if(storedPermission==='granted'&&this.permission==='default'){// If we previously had permission but it's now default, request again\nthis.requestPermission();}}}// Create singleton instance\nconst browserNotificationService=new BrowserNotificationService();export default browserNotificationService;","map":{"version":3,"names":["BrowserNotificationService","constructor","permission","isSupported","window","Notification","isNotificationSupported","getPermissionStatus","requestPermission","console","warn","log","localStorage","setItem","error","canSendNotifications","sendNotification","data","notification","title","body","icon","badge","tag","requireInteraction","silent","onclick","_data$data","focus","close","navigateTo","location","href","setTimeout","sendProposalNotification","notificationData","message","proposalId","type","initialize","storedPermission","getItem","browserNotificationService"],"sources":["/Users/davnishsingh/Documents/proposalai-main/proposalai/client/src/services/browserNotifications.ts"],"sourcesContent":["export interface BrowserNotificationData {\n  title: string;\n  body: string;\n  icon?: string;\n  badge?: string;\n  tag?: string;\n  data?: any;\n  requireInteraction?: boolean;\n  silent?: boolean;\n}\n\nclass BrowserNotificationService {\n  private permission: NotificationPermission = 'default';\n  private isSupported: boolean;\n\n  constructor() {\n    this.isSupported = 'Notification' in window;\n    if (this.isSupported) {\n      this.permission = Notification.permission;\n    }\n  }\n\n  /**\n   * Check if browser notifications are supported\n   */\n  isNotificationSupported(): boolean {\n    return this.isSupported;\n  }\n\n  /**\n   * Get current permission status\n   */\n  getPermissionStatus(): NotificationPermission {\n    if (!this.isSupported) return 'denied';\n    return Notification.permission;\n  }\n\n  /**\n   * Request permission to send notifications\n   */\n  async requestPermission(): Promise<NotificationPermission> {\n    if (!this.isSupported) {\n      console.warn('Browser notifications are not supported');\n      return 'denied';\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      this.permission = permission;\n      \n      if (permission === 'granted') {\n        console.log('Browser notification permission granted');\n        // Store permission status in localStorage\n        localStorage.setItem('browserNotificationPermission', 'granted');\n      } else {\n        console.log('Browser notification permission denied');\n        localStorage.setItem('browserNotificationPermission', 'denied');\n      }\n      \n      return permission;\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return 'denied';\n    }\n  }\n\n  /**\n   * Check if we have permission to send notifications\n   */\n  canSendNotifications(): boolean {\n    return this.isSupported && this.permission === 'granted';\n  }\n\n  /**\n   * Send a browser notification\n   */\n  sendNotification(data: BrowserNotificationData): boolean {\n    if (!this.canSendNotifications()) {\n      console.warn('Cannot send notifications - permission not granted');\n      return false;\n    }\n\n    try {\n      const notification = new Notification(data.title, {\n        body: data.body,\n        icon: data.icon || '/favicon.ico',\n        badge: data.badge || '/favicon.ico',\n        tag: data.tag || 'proposalai-notification',\n        data: data.data,\n        requireInteraction: data.requireInteraction || false,\n        silent: data.silent || false,\n      });\n\n      // Handle notification click\n      notification.onclick = () => {\n        window.focus();\n        notification.close();\n        \n        // Navigate to the relevant page if data contains navigation info\n        if (data.data?.navigateTo) {\n          window.location.href = data.data.navigateTo;\n        }\n      };\n\n      // Auto-close notification after 5 seconds (unless requireInteraction is true)\n      if (!data.requireInteraction) {\n        setTimeout(() => {\n          notification.close();\n        }, 5000);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error sending browser notification:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Send notification for new proposal activity\n   */\n  sendProposalNotification(notification: {\n    type: string;\n    title: string;\n    message: string;\n    proposalId?: string;\n    proposalTitle?: string;\n    clientName?: string;\n  }): boolean {\n    const notificationData: BrowserNotificationData = {\n      title: notification.title,\n      body: notification.message,\n      icon: '/favicon.ico',\n      tag: `proposal-${notification.proposalId || 'general'}`,\n      data: {\n        type: notification.type,\n        proposalId: notification.proposalId,\n        navigateTo: notification.proposalId ? `/proposals/${notification.proposalId}` : '/dashboard'\n      },\n      requireInteraction: false,\n      silent: false,\n    };\n\n    return this.sendNotification(notificationData);\n  }\n\n  /**\n   * Initialize the service and check for stored permission\n   */\n  initialize(): void {\n    if (!this.isSupported) return;\n\n    // Check if we have stored permission status\n    const storedPermission = localStorage.getItem('browserNotificationPermission');\n    if (storedPermission === 'granted' && this.permission === 'default') {\n      // If we previously had permission but it's now default, request again\n      this.requestPermission();\n    }\n  }\n}\n\n// Create singleton instance\nconst browserNotificationService = new BrowserNotificationService();\n\nexport default browserNotificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}