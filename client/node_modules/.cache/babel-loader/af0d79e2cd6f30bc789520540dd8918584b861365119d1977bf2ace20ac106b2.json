{"ast":null,"code":"class BrowserNotificationService {\n  constructor() {\n    this.permission = 'default';\n    this.isSupported = void 0;\n    this.isSupported = 'Notification' in window;\n    if (this.isSupported) {\n      this.permission = Notification.permission;\n    }\n  }\n\n  /**\n   * Check if browser notifications are supported\n   */\n  isNotificationSupported() {\n    return this.isSupported;\n  }\n\n  /**\n   * Get current permission status\n   */\n  getPermissionStatus() {\n    if (!this.isSupported) return 'denied';\n    return Notification.permission;\n  }\n\n  /**\n   * Request permission to send notifications\n   */\n  async requestPermission() {\n    if (!this.isSupported) {\n      console.warn('Browser notifications are not supported');\n      return 'denied';\n    }\n    try {\n      const permission = await Notification.requestPermission();\n      this.permission = permission;\n      if (permission === 'granted') {\n        console.log('Browser notification permission granted');\n        // Store permission status in localStorage\n        localStorage.setItem('browserNotificationPermission', 'granted');\n      } else {\n        console.log('Browser notification permission denied');\n        localStorage.setItem('browserNotificationPermission', 'denied');\n      }\n      return permission;\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return 'denied';\n    }\n  }\n\n  /**\n   * Check if we have permission to send notifications\n   */\n  canSendNotifications() {\n    return this.isSupported && this.permission === 'granted';\n  }\n\n  /**\n   * Send a browser notification\n   */\n  sendNotification(data) {\n    if (!this.canSendNotifications()) {\n      console.warn('Cannot send notifications - permission not granted');\n      return false;\n    }\n    try {\n      const notification = new Notification(data.title, {\n        body: data.body,\n        icon: data.icon || '/favicon.ico',\n        badge: data.badge || '/favicon.ico',\n        tag: data.tag || 'proposalai-notification',\n        data: data.data,\n        requireInteraction: data.requireInteraction || false,\n        silent: data.silent || false\n      });\n\n      // Handle notification click\n      notification.onclick = () => {\n        var _data$data;\n        window.focus();\n        notification.close();\n\n        // Navigate to the relevant page if data contains navigation info\n        if ((_data$data = data.data) !== null && _data$data !== void 0 && _data$data.navigateTo) {\n          window.location.href = data.data.navigateTo;\n        }\n      };\n\n      // Auto-close notification after 5 seconds (unless requireInteraction is true)\n      if (!data.requireInteraction) {\n        setTimeout(() => {\n          notification.close();\n        }, 5000);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error sending browser notification:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Send notification for new proposal activity\n   */\n  sendProposalNotification(notification) {\n    const notificationData = {\n      title: notification.title,\n      body: notification.message,\n      icon: '/favicon.ico',\n      tag: `proposal-${notification.proposalId || 'general'}`,\n      data: {\n        type: notification.type,\n        proposalId: notification.proposalId,\n        navigateTo: notification.proposalId ? `/proposals/${notification.proposalId}` : '/dashboard'\n      },\n      requireInteraction: false,\n      silent: false\n    };\n    return this.sendNotification(notificationData);\n  }\n\n  /**\n   * Initialize the service and check for stored permission\n   */\n  initialize() {\n    if (!this.isSupported) return;\n\n    // Check if we have stored permission status\n    const storedPermission = localStorage.getItem('browserNotificationPermission');\n    if (storedPermission === 'granted' && this.permission === 'default') {\n      // If we previously had permission but it's now default, request again\n      this.requestPermission();\n    }\n  }\n}\n\n// Create singleton instance\nconst browserNotificationService = new BrowserNotificationService();\nexport default browserNotificationService;","map":{"version":3,"names":["BrowserNotificationService","constructor","permission","isSupported","window","Notification","isNotificationSupported","getPermissionStatus","requestPermission","console","warn","log","localStorage","setItem","error","canSendNotifications","sendNotification","data","notification","title","body","icon","badge","tag","requireInteraction","silent","onclick","_data$data","focus","close","navigateTo","location","href","setTimeout","sendProposalNotification","notificationData","message","proposalId","type","initialize","storedPermission","getItem","browserNotificationService"],"sources":["/Users/davnishsingh/Documents/proposalai-main/proposalai/client/src/services/browserNotifications.ts"],"sourcesContent":["export interface BrowserNotificationData {\n  title: string;\n  body: string;\n  icon?: string;\n  badge?: string;\n  tag?: string;\n  data?: any;\n  requireInteraction?: boolean;\n  silent?: boolean;\n}\n\nclass BrowserNotificationService {\n  private permission: NotificationPermission = 'default';\n  private isSupported: boolean;\n\n  constructor() {\n    this.isSupported = 'Notification' in window;\n    if (this.isSupported) {\n      this.permission = Notification.permission;\n    }\n  }\n\n  /**\n   * Check if browser notifications are supported\n   */\n  isNotificationSupported(): boolean {\n    return this.isSupported;\n  }\n\n  /**\n   * Get current permission status\n   */\n  getPermissionStatus(): NotificationPermission {\n    if (!this.isSupported) return 'denied';\n    return Notification.permission;\n  }\n\n  /**\n   * Request permission to send notifications\n   */\n  async requestPermission(): Promise<NotificationPermission> {\n    if (!this.isSupported) {\n      console.warn('Browser notifications are not supported');\n      return 'denied';\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      this.permission = permission;\n      \n      if (permission === 'granted') {\n        console.log('Browser notification permission granted');\n        // Store permission status in localStorage\n        localStorage.setItem('browserNotificationPermission', 'granted');\n      } else {\n        console.log('Browser notification permission denied');\n        localStorage.setItem('browserNotificationPermission', 'denied');\n      }\n      \n      return permission;\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return 'denied';\n    }\n  }\n\n  /**\n   * Check if we have permission to send notifications\n   */\n  canSendNotifications(): boolean {\n    return this.isSupported && this.permission === 'granted';\n  }\n\n  /**\n   * Send a browser notification\n   */\n  sendNotification(data: BrowserNotificationData): boolean {\n    if (!this.canSendNotifications()) {\n      console.warn('Cannot send notifications - permission not granted');\n      return false;\n    }\n\n    try {\n      const notification = new Notification(data.title, {\n        body: data.body,\n        icon: data.icon || '/favicon.ico',\n        badge: data.badge || '/favicon.ico',\n        tag: data.tag || 'proposalai-notification',\n        data: data.data,\n        requireInteraction: data.requireInteraction || false,\n        silent: data.silent || false,\n      });\n\n      // Handle notification click\n      notification.onclick = () => {\n        window.focus();\n        notification.close();\n        \n        // Navigate to the relevant page if data contains navigation info\n        if (data.data?.navigateTo) {\n          window.location.href = data.data.navigateTo;\n        }\n      };\n\n      // Auto-close notification after 5 seconds (unless requireInteraction is true)\n      if (!data.requireInteraction) {\n        setTimeout(() => {\n          notification.close();\n        }, 5000);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error sending browser notification:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Send notification for new proposal activity\n   */\n  sendProposalNotification(notification: {\n    type: string;\n    title: string;\n    message: string;\n    proposalId?: string;\n    proposalTitle?: string;\n    clientName?: string;\n  }): boolean {\n    const notificationData: BrowserNotificationData = {\n      title: notification.title,\n      body: notification.message,\n      icon: '/favicon.ico',\n      tag: `proposal-${notification.proposalId || 'general'}`,\n      data: {\n        type: notification.type,\n        proposalId: notification.proposalId,\n        navigateTo: notification.proposalId ? `/proposals/${notification.proposalId}` : '/dashboard'\n      },\n      requireInteraction: false,\n      silent: false,\n    };\n\n    return this.sendNotification(notificationData);\n  }\n\n  /**\n   * Initialize the service and check for stored permission\n   */\n  initialize(): void {\n    if (!this.isSupported) return;\n\n    // Check if we have stored permission status\n    const storedPermission = localStorage.getItem('browserNotificationPermission');\n    if (storedPermission === 'granted' && this.permission === 'default') {\n      // If we previously had permission but it's now default, request again\n      this.requestPermission();\n    }\n  }\n}\n\n// Create singleton instance\nconst browserNotificationService = new BrowserNotificationService();\n\nexport default browserNotificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}