{"ast":null,"code":"var _jsxFileName = \"/Users/davnishsingh/Documents/proposalai/client/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [primaryColor, setPrimaryColor] = useState('#3B82F6');\n  const [secondaryColor, setSecondaryColor] = useState('#1F2937');\n  const [fontFamily, setFontFamily] = useState('Inter');\n  const updateTheme = colors => {\n    setPrimaryColor(colors.primaryColor);\n    setSecondaryColor(colors.secondaryColor);\n    setFontFamily(colors.fontFamily);\n\n    // Apply CSS custom properties\n    const root = document.documentElement;\n    root.style.setProperty('--primary-color', colors.primaryColor);\n    root.style.setProperty('--secondary-color', colors.secondaryColor);\n    root.style.setProperty('--font-family', colors.fontFamily);\n  };\n  useEffect(() => {\n    // Apply initial theme\n    updateTheme({\n      primaryColor,\n      secondaryColor,\n      fontFamily\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      primaryColor,\n      secondaryColor,\n      fontFamily,\n      updateTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"eRP7ZP8q6nAUCDd441idtzMYhIE=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","primaryColor","setPrimaryColor","secondaryColor","setSecondaryColor","fontFamily","setFontFamily","updateTheme","colors","root","document","documentElement","style","setProperty","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/Users/davnishsingh/Documents/proposalai/client/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface ThemeContextType {\n  primaryColor: string;\n  secondaryColor: string;\n  fontFamily: string;\n  updateTheme: (colors: { primaryColor: string; secondaryColor: string; fontFamily: string }) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [primaryColor, setPrimaryColor] = useState('#3B82F6');\n  const [secondaryColor, setSecondaryColor] = useState('#1F2937');\n  const [fontFamily, setFontFamily] = useState('Inter');\n\n  const updateTheme = (colors: { primaryColor: string; secondaryColor: string; fontFamily: string }) => {\n    setPrimaryColor(colors.primaryColor);\n    setSecondaryColor(colors.secondaryColor);\n    setFontFamily(colors.fontFamily);\n\n    // Apply CSS custom properties\n    const root = document.documentElement;\n    root.style.setProperty('--primary-color', colors.primaryColor);\n    root.style.setProperty('--secondary-color', colors.secondaryColor);\n    root.style.setProperty('--font-family', colors.fontFamily);\n  };\n\n  useEffect(() => {\n    // Apply initial theme\n    updateTheme({ primaryColor, secondaryColor, fontFamily });\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ primaryColor, secondaryColor, fontFamily, updateTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASzF,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAM3E,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,SAAS,CAAC;EAC3D,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,SAAS,CAAC;EAC/D,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,OAAO,CAAC;EAErD,MAAMe,WAAW,GAAIC,MAA4E,IAAK;IACpGN,eAAe,CAACM,MAAM,CAACP,YAAY,CAAC;IACpCG,iBAAiB,CAACI,MAAM,CAACL,cAAc,CAAC;IACxCG,aAAa,CAACE,MAAM,CAACH,UAAU,CAAC;;IAEhC;IACA,MAAMI,IAAI,GAAGC,QAAQ,CAACC,eAAe;IACrCF,IAAI,CAACG,KAAK,CAACC,WAAW,CAAC,iBAAiB,EAAEL,MAAM,CAACP,YAAY,CAAC;IAC9DQ,IAAI,CAACG,KAAK,CAACC,WAAW,CAAC,mBAAmB,EAAEL,MAAM,CAACL,cAAc,CAAC;IAClEM,IAAI,CAACG,KAAK,CAACC,WAAW,CAAC,eAAe,EAAEL,MAAM,CAACH,UAAU,CAAC;EAC5D,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd;IACAc,WAAW,CAAC;MAAEN,YAAY;MAAEE,cAAc;MAAEE;IAAW,CAAC,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA,CAACC,YAAY,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEd,YAAY;MAAEE,cAAc;MAAEE,UAAU;MAAEE;IAAY,CAAE;IAAAR,QAAA,EACrFA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACnB,EAAA,CA3BWF,aAA2C;AAAAsB,EAAA,GAA3CtB,aAA2C;AA6BxD,OAAO,MAAMuB,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGhC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI2B,OAAO,KAAK1B,SAAS,EAAE;IACzB,MAAM,IAAI2B,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}