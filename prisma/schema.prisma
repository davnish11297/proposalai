// This is your Prisma schema file for MongoDB

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  role      String   @default("MEMBER")
  isPublicUser Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proposals    Proposal[]
  comments     Comment[]
  activities   Activity[]
  teamMembers  TeamMember[]
  notifications Notification[]
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  valueProps String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  proposals  Proposal[]
  teams      Team[]
}

model Proposal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  description String?
  clientName String?
  type      String
  status    String
  content   String
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author      User? @relation(fields: [authorId], references: [id])
  authorId    String?
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  comments    Comment[]
  activities  Activity[]
  accessRequests AccessRequest[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User? @relation(fields: [authorId], references: [id])
  authorId  String?
  proposal  Proposal? @relation(fields: [proposalId], references: [id])
  proposalId String?
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  message   String
  details   String?
  createdAt DateTime @default(now())
  user      User? @relation(fields: [userId], references: [id])
  userId    String?
  proposal  Proposal? @relation(fields: [proposalId], references: [id])
  proposalId String?
}

model Team {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  members   TeamMember[]
}

model TeamMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User? @relation(fields: [userId], references: [id])
  userId    String?
  team      Team? @relation(fields: [teamId], references: [id])
  teamId    String?
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  message   String
  read      Boolean @default(false)
  createdAt DateTime @default(now())
  user      User? @relation(fields: [userId], references: [id])
  userId    String?
}

model AccessRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  status    String @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  proposal  Proposal? @relation(fields: [proposalId], references: [id])
  proposalId String?
}
