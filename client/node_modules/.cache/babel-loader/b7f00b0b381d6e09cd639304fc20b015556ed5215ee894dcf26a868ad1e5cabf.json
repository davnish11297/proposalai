{"ast":null,"code":"var _jsxFileName = \"/Users/davnishsingh/Documents/proposalai-main/client/src/hooks/useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const response = await api.get('/auth/me');\n        setUser(response.data.data);\n      }\n    } catch (error) {\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      console.log('AuthContext: Making login request');\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      console.log('AuthContext: Login response received:', response.data);\n      const {\n        token,\n        user\n      } = response.data.data;\n      localStorage.setItem('token', token);\n      console.log('AuthContext: Token stored, setting user');\n      setUser(user);\n      console.log('AuthContext: User set successfully');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('AuthContext: Login error:', error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed');\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      const {\n        token,\n        user\n      } = response.data.data;\n      localStorage.setItem('token', token);\n      setUser(user);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n  const updateUser = userData => {\n    setUser(prev => prev ? {\n      ...prev,\n      ...userData\n    } : null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout,\n      updateUser,\n      checkAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","api","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","response","get","data","error","removeItem","login","email","password","console","log","post","setItem","_error$response","_error$response$data","Error","register","userData","_error$response2","_error$response2$data","logout","updateUser","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["/Users/davnishsingh/Documents/proposalai-main/client/src/hooks/useAuth.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { api } from '../services/api';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  avatar?: string;\n  organizationId?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => void;\n  updateUser: (userData: Partial<User>) => void;\n  checkAuth: () => Promise<void>;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  organizationName: string;\n  organizationSlug: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const response = await api.get('/auth/me');\n        setUser(response.data.data);\n      }\n    } catch (error) {\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      console.log('AuthContext: Making login request');\n      const response = await api.post('/auth/login', { email, password });\n      console.log('AuthContext: Login response received:', response.data);\n      \n      const { token, user } = response.data.data;\n      \n      localStorage.setItem('token', token);\n      console.log('AuthContext: Token stored, setting user');\n      setUser(user);\n      console.log('AuthContext: User set successfully');\n    } catch (error: any) {\n      console.error('AuthContext: Login error:', error);\n      throw new Error(error.response?.data?.error || 'Login failed');\n    }\n  };\n\n  const register = async (userData: RegisterData) => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      const { token, user } = response.data.data;\n      \n      localStorage.setItem('token', token);\n      setUser(user);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Registration failed');\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  const updateUser = (userData: Partial<User>) => {\n    setUser(prev => prev ? { ...prev, ...userData } : null);\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      loading,\n      login,\n      register,\n      logout,\n      updateUser,\n      checkAuth,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}